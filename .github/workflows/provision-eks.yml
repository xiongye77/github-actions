# .github/workflows/provision-eks.yml
name: Reusable Provision EKS Cluster

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      role_to_assume:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  provision-eks:
    name: 'Provision EKS Cluster with Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9  # Specify your Terraform version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
      - name: install tree 
        run:  apt-get install -y tree

      - name: Run tree command
        working-directory: ./.github/workflows/../.././infrastructure/terraform
        run: tree
        
      - name: Terraform Init
        working-directory: ./.github/workflows/../.././infrastructure/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./.github/workflows/../.././infrastructure/terraform
        run: terraform plan -out=tfplan 
        
      - name: Terraform Apply
        working-directory: ./.github/workflows/../.././infrastructure/terraform
        run: terraform apply -auto-approve tfplan

      - name: Output EKS Cluster Info
        id: eks_outputs
        working-directory: ./.github/workflows/../.././infrastructure/terraform
        run: |
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "kubeconfig=$(terraform output -raw kubeconfig)" >> $GITHUB_OUTPUT

    outputs:
      cluster_endpoint: ${{ steps.eks_outputs.outputs.cluster_endpoint }}
      kubeconfig: ${{ steps.eks_outputs.outputs.kubeconfig }}
