AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless application with API Gateway and Lambda functions for CRUD operations on DynamoDB. Add Cloudfront for CDN and WAF protection. 
Parameters:
  DomainName:
    Type: String
    Description: "Custom domain name for CloudFront distribution"
    Default: "apigw-cdn.yexiongcodetest.com"  # Replace with your custom domain name
  #DNSName:
  #  Type: String
  #  Description: "The ALB name add as cloudfront origin"
Resources:
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/api-gateway/UsersApiLogs
      RetentionInDays: 14
  
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: S
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # On-demand billing

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateUserFunction
      Handler: app.handler
      Runtime: python3.10
      CodeUri: ../lambda/create_user/
      Description: Creates a new user in DynamoDB
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ApiGateway

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUserFunction
      Handler: app.handler
      Runtime: python3.10
      CodeUri: ../lambda/get_user/
      Description: Retrieves a user from DynamoDB
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{UserID}
            Method: get
            RequestParameters:      # Specify the request parameters
              - method.request.path.UserID:
                  Required: true
                  Caching: true          
            RestApiId: !Ref ApiGateway
            Auth:
              ApiKeyRequired: true
            

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateUserFunction
      Handler: app.handler
      Runtime: python3.10
      CodeUri: ../lambda/update_user/
      Description: Updates a user in DynamoDB
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /users/{UserID}
            Method: put
            RestApiId: !Ref ApiGateway

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUserFunction
      Handler: app.handler
      Runtime: python3.10
      CodeUri: ../lambda/delete_user/
      Description: Deletes a user from DynamoDB
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{UserID}
            Method: delete
            RestApiId: !Ref ApiGateway


      

  MyApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: MyApiKey

  MyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: MyCloudFrontDistribution
    Properties:
      UsagePlanName: MyUsagePlan
      Description: "Usage plan for MyApi"
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: Prod
      Throttle:
        BurstLimit: 500
        RateLimit: 100
      Quota:
        Limit: 10000
        Period: MONTH

  MyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref MyApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref MyUsagePlan
      
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
    

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: UsersApi
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled: true
          CachingEnabled: true
          CacheTtlInSeconds: 600
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      TracingEnabled: true
        
      
          
  
  MyWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Scope: CLOUDFRONT # This must be set to value CLOUDFRONT when associating it for CloudFront
      DefaultAction:
        Block: {}
      VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: DefaultWAFMetric
      Rules:
        - Name: AllowCertainIPs
          Priority: 0
          Action:
            Allow: {}
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt IPSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AllowCertainIPsMetric

        - Name: DenyCertainIPs
          Priority: 1
          Action:
            Block: {}
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt DenyIPSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: DenyCertainIPsMetric
            
        - Name: RuleWithAWSManagedRules
          Priority: 2
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RuleWithAWSManagedRulesMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: []
        - Name: AWSManagedSQLiRules
          Priority: 3
          OverrideAction:
            Count: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
              ExcludedRules: []
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedSQLiRulesMetric

        - Name: BlockBadRequests
          Priority: 4
          Action:
            Block: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: BlockBadRequests
            SampledRequestsEnabled: true
          Statement:
            RateBasedStatement:
              Limit: 1000
              AggregateKeyType: IP

          

   # Allow requests from given IPs to associated Resources
  IPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: AllowIPSet
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses:
        - "192.0.2.0/24"
        - "180.150.37.246/32"
        
  # Deny requests from given IPs to associated Resources
  DenyIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: DenyIPSet
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses:
        - "203.0.113.0/24"

  MyDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: "Z0534949GP155SIBV2FE"  # Your Route 53 Hosted Zone ID
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: "Z2FDTNDATAQYW2"  # CloudFront hosted zone ID
        DNSName: !GetAtt MyCloudFrontDistribution.DomainName



  # DNS Validation Record for ACM Certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName  # Replace with your domain name parameter or value
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: "Z0534949GP155SIBV2FE"  # Replace with your actual Hosted Zone ID



    
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            Id: ApiOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
          #- DomainName: !Ref DNSName
          #  Id: ALBOrigin
          #  CustomOriginConfig:
          #    OriginProtocolPolicy: http-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad   
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        #CacheBehaviors:
        #  - PathPattern: "/"  # Route traffic for '/' to ALB
        #    TargetOriginId: ALBOrigin
        #    ViewerProtocolPolicy: allow-all
        #    AllowedMethods:
        #      - GET
        #      - HEAD
        #    CachedMethods:
        #      - GET
        #      - HEAD
        #    ForwardedValues:
        #      QueryString: true
        #      Cookies:
        #        Forward: all
        #    CachePolicyId: 83da9c7e-98b4-4e11-a168-04f0df8e2c65   
        #    OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
        DefaultRootObject: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        Aliases:
          - !Ref DomainName
        HttpVersion: http2
        PriceClass: PriceClass_100
        WebACLId: !GetAtt MyWebACL.Arn
                 
  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaSSMAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 
                    - ssm:PutParameter
                  Resource: '*'
                - Effect: Allow
                  Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

    # Lambda Function
  WriteToSSMLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.lambda_handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.10
        Code:
          ZipFile: |
            import json
            import boto3
            ssm = boto3.client('ssm')
            def lambda_handler(event, context):
                parameter_name = event['ResourceProperties']['ParameterName']
                parameter_value = event['ResourceProperties']['ParameterValue']
                response = ssm.put_parameter(
                    Name=parameter_name,
                    Value=parameter_value,
                    Type='String',
                    Overwrite=True
                )
                return {
                    'statusCode': 200,
                    'body': json.dumps('Parameter stored in SSM!')
                }

    # Custom Resource to call Lambda
  WriteSSMCustomResource:
    Type: Custom::WriteSSMParameter
    Properties:
      ServiceToken: !GetAtt WriteToSSMLambda.Arn
      ParameterName: "/apigw/apikey-id"
      ParameterValue: !Ref MyApiKey

Outputs:
  APIGWCDNURL:
    Description: "The URL of the CloudFront distribution After ADD DNS Alias"
    Value: !Sub "https://${DomainName}/Prod/users/U1001"
  CloudFrontURL:
    Description: "The URL of the CloudFront distribution"
    Value: !GetAtt MyCloudFrontDistribution.DomainName
  UsersApiURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
